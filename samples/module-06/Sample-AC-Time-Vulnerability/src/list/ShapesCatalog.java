package list;

import java.util.HashMap;
import java.util.Map;

import shapes.Shape;

/**
 * A class representing a list for a shapes catalog.
 */
public class ShapesCatalog {
	
	/**
	 * The original array of {@link Shape}s passed initially to us.
	 */
	private Shape[] shapes;

	/**
	 * The head of the shapes catalog.
	 */
	private Shape head;
	
	/**
	 * The last element in the catalog.
	 */
	private Shape current;
	
	/**
	 * Constructs a new instance of this class.
	 * 
	 * @param shapes See {@link #shapes}.
	 */
	public ShapesCatalog(Shape[] shapes) {
		this.shapes = shapes;
		this.head = null;
		this.current = null;
		this.build();
	}
	
	/**
	 * Builds the shapes catalog by linking {@link Shape} instances in {@link #shapes} together.
	 */
	private void build() {
		for(Shape shape: this.shapes) {
			if(this.head == null) {
				this.head = shape;
				this.current = this.head;
			} else {
				this.current.setNext(shape);
				this.current = shape;
			}
		}
	}
	
	/**
	 * Destroys the shapes catalog by unlinking each {@link Shape} instance in it.
	 */
	public void destroy() {
		for(Shape shape: this.shapes) {
			shape.setNext(null);
		}
	}
	
	/**
	 * Prints statistics about the different shapes in the catalog.
	 * 
	 * @return A {@link String} corresponding to the statistics collected.
	 */
	public String getStats() {
		Shape c = this.head;
		int totalShapesCount = 0;
		while(c != null) {
			totalShapesCount++;
			if(totalShapesCount > this.shapes.length) {
				System.out.println("While traversing the number of shapes traversed is larger the the number of shapes in the queue: " + toString());
			}
			c = c.getNext();
		}
		
		return toString();
	}

	public String toString() {
		StringBuilder builder = new StringBuilder();
		for(Shape shape: shapes) {
			builder.append(shape.getClass().getSimpleName() + ", ");
		}
		return builder.toString();
	}
	
}
